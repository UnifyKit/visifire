
  private static List<Path> GetPieOuterCurvedFace(SectorChartShapeParams pieParams, Point3D centroid,Point3D topFaceCenter, Point3D bottomFaceCenter)
        {
            List<Path> curvedFaces = new List<Path>();

            if (pieParams.StartAngle >= Math.PI && pieParams.StartAngle <= Math.PI*2 && pieParams.StopAngle >= Math.PI && pieParams.StopAngle <= Math.PI * 2 && pieParams.IsLargerArc)
            {

                //Path curvedSegment = GetCurvedSegment(pieParams,pieParams.OuterRadius, pieParams.StartAngle, 0, topFaceCenter, bottomFaceCenter, centroid, true);
                //curvedFaces.Add(curvedSegment);
                //curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, 0, Math.PI, topFaceCenter, bottomFaceCenter, centroid, true);
                //curvedFaces.Add(curvedSegment);
                //curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, Math.PI, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                //curvedFaces.Add(curvedSegment);
                Path curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, pieParams.StartAngle, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
                curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, 0, Math.PI*2, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
                curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, pieParams.StartAngle, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
            }
            else if (pieParams.StartAngle >= 0 && pieParams.StartAngle <= Math.PI && pieParams.StopAngle >= 0 && pieParams.StopAngle <= Math.PI && pieParams.IsLargerArc)
            {

                Path curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, pieParams.StartAngle, 0, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
                curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, pieParams.StartAngle, Math.PI * 2, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
                curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, Math.PI, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
            }
            else if (pieParams.StartAngle >= 0 && pieParams.StartAngle <= Math.PI && pieParams.StopAngle >= Math.PI && pieParams.StopAngle <= Math.PI * 2)
            {
                Path curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, pieParams.StartAngle, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
                curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, pieParams.StartAngle, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
            }
            else if (pieParams.StartAngle >= Math.PI && pieParams.StartAngle <= Math.PI * 2 && pieParams.StopAngle >= 0 && pieParams.StopAngle <= Math.PI)
            {
                Path curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, Math.PI, Math.PI*2, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
                curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, Math.PI, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
            }
            else
            {
                Path curvedSegment = GetCurvedSegment(pieParams, pieParams.OuterRadius, pieParams.StartAngle, pieParams.StopAngle, topFaceCenter, bottomFaceCenter, centroid, true);
                curvedFaces.Add(curvedSegment);
            }

            return curvedFaces;
        }




    <Grid.Resources>
            <SolidColorBrush x:Key="MyColor" Color="Red"/>
            
            <Style x:Key="ChartStyle" TargetType="vc:Chart" >
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Gray" Offset="0"/>
                            <GradientStop Color="White" Offset=".5"/>
                            <GradientStop Color="#FFB2ADAD" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style x:Key="TitleStyle" TargetType="vc:Title" >
                <Setter  Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FF000000" Offset="0"/>
                            <GradientStop Color="#FFB2ADAD" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" Value="ssss"/>
                <Setter Property="FontColor" Value="White"/>
                <Setter Property="VerticalAlignment" Value="Bottom"/>
            </Style>
            
            <Style x:Key="TitleStyle1" TargetType="vc:Title" >
                <Setter  Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                            <GradientStop Color="Gray" Offset="0"/>
                            <GradientStop Color="Wheat" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" Value="ssss"/>
                <Setter Property="FontColor" Value="White"/>
                <Setter Property="VerticalAlignment" Value="Bottom"/>
            </Style>
            
            <Style x:Key="TitleStyle2" TargetType="vc:Title" >
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                            <GradientStop Color="Gray" Offset="1"/>
                            <GradientStop Color="White" Offset="0"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Text" Value="ssss"/>
                <Setter Property="FontColor" Value="Black"/>
                <Setter Property="VerticalAlignment" Value="Bottom"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
            </Style>
            
        </Grid.Resources>